trigger:
- master
- feature/*

pool:
  my-pool

variables:
 - group: CI


stages:
- stage: CI
  jobs:
  - job: BuildAndPushDocker
    steps:
    - task: Docker@2
      displayName: Build an image 
      inputs:
        command: build
        repository: $(imageRepository)
        containerRegistry: $(dockerRegistryServiceConnection)
        dockerfile: $(dockerfilePath)
        tags: $(tag)
    - task: Docker@2
      displayName: Push an image to azure container registry
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
      inputs:
        command: push
        repository: $(imageRepository)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: $(tag)

- stage: DeployToStage
  variables:
  - group: staging
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: staging
    displayName: 'Deploy Weight Tracker App'
    environment:
      name: staging
      resourceType: VirtualMachine
    strategy:
      runOnce: 
        deploy:
          steps:
          - task: CmdLine@2
            displayName: 'Stop Container'
            inputs:
              script: 'docker rm -f $(imageRepository) || true' 

          - task: Docker@2
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              command: 'login'
              
          - task: CmdLine@2
            displayName: 'Run Container'
            inputs:
              script: 'docker run -d --restart=always --name $(imageRepository) -p 8080:8080 -e HOST=$(HOST) -e PORT=$(PORT) -e PGHOST=$(PGHOST) -e PGUSERNAME=$(PGUSERNAME) -e PGDATABASE=$(PGDBNAME) -e PGPASSWORD=$(PGPASS) -e COOKIE_ENCRYPT_PWD=$(COOKIE_ENCRYPT_PWD) -e OKTA_ORG_URL=$(OKTAURL) -e OKTA_CLIENT_ID=$(OKTACLIENT) -e OKTA_CLIENT_SECRET=$(OKTASECRET) $(containerRegistry)/$(imageRepository):$(tag)'

